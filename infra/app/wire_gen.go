// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/quocdaitrn/cp-auth/app/transport/gapi/grpcimpl"
	"github.com/quocdaitrn/cp-auth/domain/service/serviceimpl"
	"github.com/quocdaitrn/cp-auth/infra/adapters"
	"github.com/quocdaitrn/cp-auth/infra/config"
	"github.com/quocdaitrn/cp-auth/infra/providers"
	"github.com/quocdaitrn/cp-auth/infra/repo/rpcimpl"
	"github.com/quocdaitrn/cp-auth/infra/repo/storeimpl"
	"github.com/quocdaitrn/golang-kit/validator"
)

// Injectors from wire.go:

// InitApplication inits application.
func InitApplication(ctx context.Context) (*ApplicationContext, func(), error) {
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	db, err := adapters.ProvideMySQL(configConfig)
	if err != nil {
		return nil, nil, err
	}
	authRepo := storeimpl.NewAuthRepo(db)
	userServiceClient, err := providers.ProvideGRPCUserServiceClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepo := rpcimpl.NewUserRepo(userServiceClient)
	jwtProvider := providers.ProvideJWTProvider(configConfig)
	hasher := providers.ProvideHasher()
	validatorValidator, err := validator.New()
	if err != nil {
		return nil, nil, err
	}
	authService := serviceimpl.NewAuthService(authRepo, userRepo, jwtProvider, hasher, validatorValidator)
	logger := providers.ProvideLogger()
	restAPIHandler := adapters.ProvideRoutes(authService, logger, configConfig)
	restService, cleanup, err := adapters.ProvideRestService(configConfig, restAPIHandler)
	if err != nil {
		return nil, nil, err
	}
	authServiceServer := grpcimpl.NewGRPCServer(authService, logger)
	grpcService, cleanup2, err := adapters.ProvideGRPCService(configConfig, authServiceServer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	applicationContext := &ApplicationContext{
		ctx:         ctx,
		cfg:         configConfig,
		restService: restService,
		grpcService: grpcService,
	}
	return applicationContext, func() {
		cleanup2()
		cleanup()
	}, nil
}
