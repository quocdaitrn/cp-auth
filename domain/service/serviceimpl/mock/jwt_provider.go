// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// JWTProvider is an autogenerated mock type for the JWTProvider type
type JWTProvider struct {
	mock.Mock
}

// IssueToken provides a mock function with given fields: ctx, id, sub
func (_m *JWTProvider) IssueToken(ctx context.Context, id string, sub string) (string, int, error) {
	ret := _m.Called(ctx, id, sub)

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, int, error)); ok {
		return rf(ctx, id, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, sub)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, id, sub)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, id, sub)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseToken provides a mock function with given fields: ctx, tokenString
func (_m *JWTProvider) ParseToken(ctx context.Context, tokenString string) (*jwt.RegisteredClaims, error) {
	ret := _m.Called(ctx, tokenString)

	var r0 *jwt.RegisteredClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*jwt.RegisteredClaims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *jwt.RegisteredClaims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.RegisteredClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJWTProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWTProvider creates a new instance of JWTProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWTProvider(t mockConstructorTestingTNewJWTProvider) *JWTProvider {
	mock := &JWTProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
